# -*- coding: utf-8 -*-
"""RandomForestClassifier-Using-SmoteResampledData.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gX3isMv5eCl6ZMVoq4-yMGWphqgeVVso

*Assuming that the necessary libraries are imported

SMOTE RESAMPLED DATA
RANDOM FOREST CLASSIFIER
"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import RandomizedSearchCV

# Define the Random Forest model
rf_model = RandomForestClassifier(random_state=42)

# Define parameters for hyperparameter tuning
param_grid_rf = {
    'bootstrap': [True, False],
    'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, None],
    'max_features': ['auto', 'sqrt'],
    'min_samples_leaf': [1, 2, 4],
    'min_samples_split': [2, 5, 10],
    'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]
}

# Perform RandomizedSearchCV
rf_random_search = RandomizedSearchCV(rf_model, param_distributions=param_grid_rf, n_iter=100, scoring='accuracy', cv=5, verbose=1, random_state=42, n_jobs=-1)
rf_random_search.fit(X_train_resampled, y_train_resampled)

# Get the best model and evaluate on test set
best_rf = rf_random_search.best_estimator_
y_pred_rf = best_rf.predict(X_test)

# Print best parameters and classification report
print("Best Parameters (Random Forest):", rf_random_search.best_params_)
print("Accuracy (Random Forest):", rf_random_search.best_score_)
print("Classification Report (Random Forest):")
print(classification_report(y_test, y_pred_rf))
# -*- coding: utf-8 -*-
"""Stratifies-K-fold-RandomForest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gX3isMv5eCl6ZMVoq4-yMGWphqgeVVso

*Assuming that the necessary libraries are imported

STRATIFIED K-FOLD RANDOM FOREST CLASSIFIER
"""

from sklearn.model_selection import train_test_split, StratifiedKFold, cross_val_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import classification_report, accuracy_score
from sklearn.utils.class_weight import compute_class_weight
from sklearn.utils import shuffle
import pickle
import numpy as np

# Assuming the data is preprocessed and loaded into the DataFrame df

# Shuffle the dataset
df = shuffle(df, random_state=42)

# Define features and target variable
X = df['ReviewContent']
y = df['Sentiment_encoded']

# Stratified split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

# TF-IDF Vectorization
tfidf = TfidfVectorizer(max_features=5000)
X_train_tfidf = tfidf.fit_transform(X_train)
X_test_tfidf = tfidf.transform(X_test)

# Compute class weights
class_weights = compute_class_weight(class_weight='balanced', classes=np.unique(y_train), y=y_train)
class_weights_dict = {i: class_weights[i] for i in range(len(class_weights))}

# Best parameters obtained from GridSearchCV (including class_weight)
best_params_rf = {
    'bootstrap': True,
    'class_weight': class_weights_dict,
    'max_depth': 40,
    'max_features': 'log2',
    'min_samples_leaf': 1,
    'min_samples_split': 5,
    'n_estimators': 500
}

# Instantiate the RandomForestClassifier with the best parameters
best_rf = RandomForestClassifier(
    bootstrap=best_params_rf['bootstrap'],
    class_weight=best_params_rf['class_weight'],
    max_depth=best_params_rf['max_depth'],
    max_features=best_params_rf['max_features'],
    min_samples_leaf=best_params_rf['min_samples_leaf'],
    min_samples_split=best_params_rf['min_samples_split'],
    n_estimators=best_params_rf['n_estimators'],
    random_state=42
)

# Stratified K-Fold Cross Validation
skf = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)

# Perform cross-validation
cross_val_scores = cross_val_score(best_rf, X_train_tfidf, y_train, cv=skf, scoring='accuracy')

print(f"Cross-Validation Accuracy Scores: {cross_val_scores}")
print(f"Mean Cross-Validation Accuracy: {cross_val_scores.mean()}")

# Fit the classifier to the training data
best_rf.fit(X_train_tfidf, y_train)

# Predict on test data
y_pred_rf = best_rf.predict(X_test_tfidf)

# Evaluate model performance
accuracy_rf = accuracy_score(y_test, y_pred_rf)
print(f"Accuracy (Random Forest): {accuracy_rf:.2f}")

print("Classification Report (Random Forest):")
print(classification_report(y_test, y_pred_rf))
# -*- coding: utf-8 -*-
"""XGBoost.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NbasBhQIF3y0bHkaEU4WCoIImXmeUaKH

**Sentiment Analysis using XGBoost**
*assuming that necessary libraries are already installed*

XGBOOST CLASSIFIER
"""

from xgboost import XGBClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import classification_report, accuracy_score

# Initialize XGBoost classifier
xgb_model = XGBClassifier(scale_pos_weight=1, random_state=42)

# Define a parameter grid for GridSearchCV
param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [3, 6, 9],
    'learning_rate': [0.01, 0.1, 0.2],
    'subsample': [0.8, 1.0],
    'colsample_bytree': [0.8, 1.0]
}

# Initialize GridSearchCV with cross-validation
grid_search_xgb = GridSearchCV(estimator=xgb_model, param_grid=param_grid, cv=3, scoring='accuracy', n_jobs=-1)

# Fit the model
grid_search_xgb.fit(X_train, y_train)

# Best parameters from GridSearchCV
best_params_xgb = grid_search_xgb.best_params_
print(f"Best Parameters (XGBoost): {best_params_xgb}")

# Predict sentiment on the test set using the best estimator
y_pred_xgb = grid_search_xgb.best_estimator_.predict(X_test)

# Calculate accuracy
accuracy_xgb = accuracy_score(y_test, y_pred_xgb)
print(f"Accuracy (XGBoost): {accuracy_xgb:.2f}")

# Generate classification report
print("Classification Report (XGBoost):")
print(classification_report(y_test, y_pred_xgb))